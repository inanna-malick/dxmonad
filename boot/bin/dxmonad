#!/usr/bin/env python
import os
from subprocess import call


def ensure_dir(f):
    if not os.path.exists(f):
        os.makedirs(f)

if __name__ == "__main__":
    # directories located in both the host and dxmonad home dir
    shared_volumes = ['.dbus', '.sbt', '.ivy2', '.mozilla', '.IntelliJIdea14', '.ssh', 'dxmonad', 'work']
    host_home = os.environ['HOME']
    dxmonad_home = '/home/dev'

    for f in shared_volumes:
        ensure_dir(host_home + "/" + f)

    image = "pkinsky/dxmonad:latest"

    dxmonad_name = 'dxmonad'
    shared_env = ['USER_UID', 'USER_GID', 'DISPLAY', 'BOX_NAME']

    docker_opts = ["--name=" + dxmonad_name]

    docker_opts.extend(map(lambda s: "--env=" + s, shared_env))
    docker_opts.extend(map(lambda s: "--volume=" + host_home + "/" + s + ":" + dxmonad_home + "/" + s, shared_volumes))

    docker_opts.append("--volume=/var/run/docker.sock:/var/run/docker.sock")
    docker_opts.append("--volume=/tmp/.X11-unix:/tmp/.X11-unix")
    #user_uid = os.environ['USER_UID']
    #docker_opts.append("--volume=/run/user/" + user_uid +"/pulse:/run/pulse")

    docker_opts.append(image)

    docker_cmd = ["docker", "run"] + docker_opts

    call(["docker", "kill", dxmonad_name])
    call(["docker", "rm", dxmonad_name])
    call(docker_cmd)

